# Tasks for building and deploying the application
- name: build production
  become: yes
  become_user: '{{ ansible_user }}'
  block:
    - name: AdonisJs | Clone
      git:
        repo: 'https://github.com/elyseeMB/testAdonisjs.git'
        dest: '{{ root_path }}'
        force: yes

    - name: Copier le fichier .env
      template:
        src: env.j2
        dest: '{{ root_path }}/.env'

    - name: Install dependencies with pnpm
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pnpm install
      args:
        chdir: '{{ root_path }}'
        executable: /bin/bash

    - name: Build du projet
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pnpm run build
      args:
        chdir: '{{ root_path }}'
        executable: /bin/bash

    - name: Installation des dépendances de production
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pnpm i --prod
      args:
        chdir: '{{ root_path }}/build'
        executable: /bin/bash

    - name: Copier le fichier .env dans le dossier build
      template:
        src: env.j2
        dest: '{{ root_path }}/build/.env'

    - name: Installer PM2 globalement
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        npm install -g pm2
      args:
        executable: /bin/bash
      changed_when: false

    - name: Création du fichier ecosystem
      template:
        src: ecosystem.config.cjs.j2
        dest: '{{ root_path }}/build/ecosystem.config.cjs'

    - name: Démarrer avec PM2
      shell: |
        source ~/.bashrc
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pm2 kill || true
        pm2 start ecosystem.config.cjs --watch
      args:
        chdir: '{{ root_path }}/build/'
        executable: /bin/bash
      environment:
        PATH: '{{ nvm_dir }}/versions/node/{{ node_version }}/bin:{{ ansible_env.PATH }}'

    - name: Vérifier les processus PM2 après démarrage
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \ . "$NVM_DIR/nvm.sh"
        pm2 list
      args:
        chdir: '{{ root_path }}/build'
        executable: /bin/bash
      register: pm2_list

    - debug:
        var: pm2_list.stdout_lines

    - name: Setup PM2 startup script
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pm2 startup systemd -u {{ ansible_user }} --hp /home/{{ ansible_user }}
      args:
        executable: /bin/bash
      register: pm2_output
      failed_when: false

    - name: Debug - Afficher la sortie de PM2 startup
      debug:
        var: pm2_output.stdout_lines

    - name: Extraire et exécuter la commande PM2 startup
      become: yes
      become_method: sudo
      become_user: root
      shell: '{{ pm2_output.stdout_lines[-1] }}'
      when: pm2_output.stdout is search("sudo env PATH=")

    - name: Save PM2 process list
      shell: |
        export NVM_DIR="{{ nvm_dir }}"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        pm2 save
      args:
        executable: /bin/bash
